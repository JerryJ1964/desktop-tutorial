generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model amenity {
  id       String     @id @default(uuid())
  name     String
  Property Property[]
}

model Booking {
  id            String     @id @default(uuid())
  userId        String     @unique @default(uuid())
  propertyId    String     @default(uuid())
  checkinDate   DateTime
  checkoutDate  DateTime
  numberOfGuets Int
  totalPrice    Int
  bookingStauts String
  Property      Property[]
}

model Host {
  id             String     @id @default(uuid())
  username       String     @unique
  name           String
  aboutMe        String
  email          String
  password       String
  phoneNumber    String
  profilePicture String
  listings       Property[]
}

model Property {
  id             String    @id @default(uuid())
  hostId         String    @unique @default(uuid())
  title          String
  description    String
  location       String
  pricePerNight  Decimal
  bedroomCount   Int
  bathroomCount  Int
  maxGuestsCount Int
  rating         Int
  userId         String
  propertyId     String
  amenities      amenity[]
  bookings       Booking[]
  reviews        Review[]
  hostedBy       Host      @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User           Users     @relation(fields: [userId], references: [id])

  @@index([hostId])
  @@index([userId])
}

model Review {
  id         String     @id @default(uuid())
  userId     String     @default(uuid())
  propertyId String     @default(uuid())
  rating     Int
  comment    String
  Property   Property[]
}

model Users {
  id             String     @id @default(uuid())
  username       String     @unique
  password       String
  name           String
  email          String
  phoneNumber    String
  profilePicture String
  Property       Property[]
}

model BookingToProperty {
  A String
  B String

  @@unique([A, B], map: "_BookingToProperty_AB_unique")
  @@index([B], map: "_BookingToProperty_B_index")
  @@map("_BookingToProperty")
}

model PropertyToReview {
  A String
  B String

  @@unique([A, B], map: "_PropertyToReview_AB_unique")
  @@index([B], map: "_PropertyToReview_B_index")
  @@map("_PropertyToReview")
}

model PropertyToamenity {
  A String
  B String

  @@unique([A, B], map: "_PropertyToamenity_AB_unique")
  @@index([B], map: "_PropertyToamenity_B_index")
  @@map("_PropertyToamenity")
}
