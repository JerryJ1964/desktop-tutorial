generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Amenity {
  id         String     @id @default(uuid())
  name       String
  properties Property[]
}

model Review {
  id         String     @id @default(uuid())
  userId     String     @default(uuid())
  propertyId String     @default(uuid())
  rating     Int
  comment    String
  property   Property[]
  User       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model User {
  id             String     @id @default(uuid())
  username       String
  password       String     @unique
  name           String
  email          String
  phoneNumber    String
  profilePicture String
  reviews        Review[]
  Booking        Booking[]
  Property       Property[]

  @@index([username], name: "User.username_unique")
}

model Booking {
  id             String     @id @default(uuid())
  userId         String
  propertyId     String
  checkinDate    DateTime
  checkoutDate   DateTime
  numberOfGuests Int
  totalPrice     Int
  bookingStatus  String
  property       Property   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User           User       @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([propertyId])
}

model Host {
  id             String     @id @default(uuid())
  username       String     @default(uuid())
  password       String
  name           String
  email          String
  phoneNumber    String
  profilePicture String
  aboutMe        String
  listings       Property[]
}

model Property {
  id            String  @id @default(uuid())
  title         String
  description   String
  location      String
  pricePerNight Decimal
  bedroomCount  Int
  bathRoomCount Int
  maxGuestCount Int
  hostId        String  @default(uuid())
  userId        String  @default(uuid())
  rating        Int

  amenities Amenity[]
  bookings  Booking[]
  reviews   Review[]
  hostedBy  Host      @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userBy    User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([hostId])
  @@index([userId])
}
