generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model amenities {
  id         String       @id @default(uuid())
  name       String
  Properties Properties[]
}

model Bookings {
  id             String       @id @default(uuid())
  userId         String       @unique @default(uuid())
  propertyId     String       @default(uuid())
  checkinDate    DateTime
  checkoutDate   DateTime
  numberOfGuests Int
  totalPrice     Int
  bookingStatus  String
  Properties     Properties[]
}

model Hosts {
  id             String       @id @default(uuid())
  username       String       @unique
  name           String
  aboutMe        String
  email          String
  password       String
  phoneNumber    String
  profilePicture String
  listings       Properties[]
}

model Properties {
  id             String      @id @default(uuid())
  hostId         String      @unique @default(uuid())
  title          String
  description    String
  location       String
  pricePerNight  Decimal
  bedroomCount   Int
  bathroomCount  Int
  maxGuestsCount Int
  rating         Int
  userId         String
  propertyId     String
  amenities      amenities[]
  bookings       Bookings[]
  reviews        Reviews[]
  hostedBy       Hosts       @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User           Users       @relation(fields: [userId], references: [id])

  @@index([hostId])
  @@index([userId])
}

model Reviews {
  id         String       @id @default(uuid())
  userId     String       @default(uuid())
  propertyId String       @default(uuid())
  rating     Int
  comment    String
  Properties Properties[]
}

model Users {
  id             String       @id @default(uuid())
  username       String       @unique
  password       String
  name           String
  email          String
  phoneNumber    String
  profilePicture String
  Properties     Properties[]
}

model BookingToProperties {
  A String
  B String

  @@unique([A, B], map: "_BookingToProperties_AB_unique")
  @@index([B], map: "_BookingToProperties_B_index")
  @@map("_BookingToProperties")
}

model PropertiesToReviews {
  A String
  B String

  @@unique([A, B], map: "_PropertiesToReviews_AB_unique")
  @@index([B], map: "_PropertiesToReviews_B_index")
  @@map("_PropertiesToReviews")
}

model PropertiesToamenities {
  A String
  B String

  @@unique([A, B], map: "_PropertiesToamenities_AB_unique")
  @@index([B], map: "_PropertiesToamenities_B_index")
  @@map("_PropertiesToamenities")
}

model BookingsToProperties {
  A String
  B String

  @@unique([A, B], map: "_BookingsToProperties_AB_unique")
  @@index([B], map: "_BookingsToProperties_B_index")
  @@map("_BookingsToProperties")
}
